// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
}

model Imoveis {
  id          String    @id @default(cuid())
  nome        String
  descricao   String
  cidade      String 
  endereco    String
  area        Int
  quartos     Int
  banheiros   Int
  vaga        Int
  preco       Decimal
  iptu        Decimal
  status      Boolean   @default(true)
  criadoEm    DateTime  @default(now())
  imagens     Imagem[]
  
}

model Imagem {
  id        String     @id @default(cuid())
  url       String
  imovelId  String
  imoveis    Imoveis  @relation(fields: [imovelId], references: [id])
}

model Contato {
  id        String   @id @default(cuid())
  nome      String
  email     String
  telefone  String
  mensagem  String
  status    Boolean  @default(false)
  criadoEm  DateTime @default(now())
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions Session[]
  accounts Account[]

  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}